/*
  Created by: Fei Song
  File Name: tiny.cup
  To Build: java java_cup.Main < tiny.cup
*/
   
   
/* ----------------------Preliminary Declarations Section--------------------*/
   
/* Import the class java_cup.runtime.*  */
//import java_cup.runtime.*;
import absyn.*;
   
/* Parser code to change the way the parser reports errors (include
   line and column number of the error). */
parser code {:
    
    /* Change the method report_error so it will display the line and
       column of where the error occurred in the input as well as the
       reason for the error which is passed into the method in the
       String 'message'. */
    public void report_error(String message, Object info) {
   
        /* Create a StringBuffer called 'm' with the string 'Error' in it. */
        StringBuffer m = new StringBuffer("Error");
   
        /* Check if the information passed to the method is the same
           type as the type java_cup.runtime.Symbol. */
        if (info instanceof java_cup.runtime.Symbol) {
            /* Declare a java_cup.runtime.Symbol object 's' with the
               information in the object info that is being typecasted
               as a java_cup.runtime.Symbol object. */
            java_cup.runtime.Symbol s = ((java_cup.runtime.Symbol) info);
   
            /* Check if the line number in the input is greater or
               equal to zero. */
            if (s.left >= 0) {                
                /* Add to the end of the StringBuffer error message
                   the line number of the error in the input. */
                m.append(" in line "+(s.left+1));   
                /* Check if the column number in the input is greater
                   or equal to zero. */
                if (s.right >= 0)                    
                    /* Add to the end of the StringBuffer error message
                       the column number of the error in the input. */
                    m.append(", column "+(s.right+1));
            }
        }
   
        /* Add to the end of the StringBuffer error message created in
           this method the message that was passed into this method. */
        m.append(" : "+message);
   
        /* Print the contents of the StringBuffer 'm', which contains
           an error message, out on a line. */
        System.err.println(m);
    }
   
    /* Change the method report_fatal_error so when it reports a fatal
       error it will display the line and column number of where the
       fatal error occurred in the input as well as the reason for the
       fatal error which is passed into the method in the object
       'message' and then exit.*/
    public void report_fatal_error(String message, Object info) {
        report_error(message, info);
        System.exit(1);
    }
:};
   
   
/* ------------Declaration of Terminals and Non Terminals Section----------- */
terminal ELSE, IF, INT, RETURN, VOID, WHILE;
terminal PLUS, MINUS, STAR, SLASH, LT, LTE, GT, GTE, EQ, NE, ASSIGN, SEMI, COMMA;
terminal OBRACE, CBRACE, OBRACK, CBRACK, OPAREN, CPAREN, OCOMMENT, CCOMMENT;
terminal String ID, NUM;

   
terminal THEN, END, REPEAT, UNTIL, READ, WRITE;
terminal ERROR;


non terminal params, param_list, local_decs, arg_list;
non terminal empty, var;
non terminal relop, addop, mulop, call, args; 

non terminal ExpList program;
non terminal Exp expr, stmt, term, factor, ret_stmt, add_expr, sim_expr, iter_stmt, sele_stmt, expr_stmt, comp_stmt;
non terminal TypeSpec type_spec;
non terminal DecList dec_list;
non terminal Dec dec, fun_dec;
non terminal VarDec var_dec, param;

non terminal ExpList stmt_seq, stmt_list;
non terminal Exp if_stmt, repeat_stmt, assign_stmt, read_stmt, write_stmt;
non terminal Exp exp, simple_exp;  

/* ----------------------------Grammar Section-------------------- */
   
program	     ::= stmt_seq:s
                 {: RESULT = s;
                    System.out.println( "The abstract syntax tree is:" );
                    Absyn.showTree( RESULT, 0 );
                 :}
               ;

//temp program so chris can play
/*program      ::= type_spec:s
                 {: //RESULT = s;
                    System.out.println( "The abstract syntax tree is:" + s );
                    //Absyn.showTree( RESULT, 0 );
                 :}
               ;*/

/*
//1
program      ::= dec_list:s
                 {: RESULT = s;
                    System.out.println( "The abstract syntax tree is:" );
                    Absyn.showTree( RESULT, 0 );
                 :}
               ;
*/
//2
dec_list     ::= dec_list:s1 dec:s2
                 {: 
                    DecList t = s1;
                    while( t.tail != null )
                      t = t.tail;
                    t.tail = new DecList(s2, null);
                    RESULT = s1;
                 :}
               | dec:s
                 {: 
                   RESULT = new DecList(s, null); 
                 :}
               ;
//3
dec         ::= var_dec:s
                 {:
                    RESULT = s;
                 :}
               | fun_dec:s
                 {: 
                    RESULT = s;
                 :}
               ;
//4
var_dec         ::= type_spec:s ID:i SEMI
                 {:
                    RESULT = new RegularDec(sleft,s,i);
                 :}
               | type_spec:s ID:i OBRACK NUM:n CBRACK SEMI
                 {: 
                    RESULT = new ArrayDec(sleft,s,i, new IntExp(nleft,n));
                 :}
               ;
//5
type_spec        ::= INT:i
                 {: 
                    RESULT = new TypeSpec(ileft,TypeSpec.INT);
                 :}
                 | VOID:i
                 {: 
                    RESULT = new TypeSpec(ileft,TypeSpec.VOID);
                 :}
               ;

//6
fun_dec        ::= type_spec:s1 ID OBRACE params:s2 CBRACE comp_stmt:s3
                 {:

                 :}
               ;

//7
params        ::= param_list:s
                 {:

                 :}
                 | VOID
                 {: 

                 :}
               ;

//8
param_list        ::= param_list:s1 COMMA param:s2
                 {:

                 :}
                 | param:s
                 {: 

                 :}
               ;

//9
param        ::= type_spec:s ID:i
                 {:
                    RESULT = new RegularDec(sleft,s,i);
                 :}
                 | type_spec:s ID:i OBRACK CBRACK
                 {: 
                    RESULT = new RegularDec(sleft,s,i);
                 :}
               ;

//10
comp_stmt        ::= OBRACE local_decs:s1 stmt_list:s2 CBRACE
                 {:

                 :}
               ;

//11
local_decs        ::= local_decs:s1 var_dec:s2
                 {:

                 :}
                 | 
                 {: 

                 :}
               ;

//12
stmt_list        ::= stmt_list:s1 stmt:s2
                 {: ExpList t = s1;
                    while( t.tail != null )
                      t = t.tail;
                    t.tail = new ExpList(s2, null);
                    RESULT = s1;
                 :}
                  | stmt:s
                 {: RESULT = new ExpList(s, null); 
                 :}
                  /*| error:
                 {: parser.report_error("invalid", null); 
                    RESULT = new ExpList(s, null); 
                 :}*/
               ;

/*
//13
/*stmt        ::= expr_stmt:s
                 {:
                    RESULT = s;
                 :}
                 | comp_stmt:s
                 {: 
                   RESULT = s;
                 :}
                 | sele_stmt:s
                 {: 
                    RESULT = s;
                 :}
                 | iter_stmt:s
                 {: 
                    RESULT = s;
                 :}
                 | ret_stmt:s
                 {: 
                    RESULT = s;
                 :}
               ;*/

//14
expr_stmt        ::= expr SEMI
                 {:

                 :}
                 |  SEMI
                 {:

                 :}
               ;
//15
expr_stmt        ::= expr SEMI
                 {:

                 :}
                 ;

//16
iter_stmt        ::= WHILE OBRACE expr:s1 CBRACE stmt:s2
                 {:

                 :}
                 ;
//17
ret_stmt        ::= RETURN:i SEMI
                 {:
                    RESULT = new ReturnStmt(ileft,null);
                 :}
                 | RETURN:i exp:s SEMI
                 {:
                    RESULT = new ReturnStmt(ileft,s);
                 :}
                 ;
//18
expr        ::= var:s1 ASSIGN expr:s2
                 {:
                    
                 :}
                 | sim_expr:s
                 {:

                 :}
                 ;
//19
var        ::= ID:i
                 {:
                    RESULT = new VarExp(ileft,i);
                 :}
                 | ID:i OBRACK expr:s CBRACK
                 {:
                    RESULT = new Array(ileft,i,s); 
                 :}
                 ;
//20
sim_expr        ::= add_expr:s1 relop:s2 add_expr:s3
                 {:

                 :}
                 | add_expr:s1
                 {:

                 :}
                 ;
//21
relop        ::= LTE
                 {:

                 :}
                 | LT
                 {:

                 :}
                 | GT
                 {:

                 :}
                 | GTE
                 {:

                 :}
                 | EQ
                 {:

                 :}
                 | NE
                 {:

                 :}
                 ;


//22
add_expr        ::= add_expr:s1 addop:s2 term:s3
                 {:

                 :}
                 | term
                 {:

                 :}
                 ;
//23
addop        ::= PLUS:i
                 {:
                    RESULT = i;
                 :}
                 | MINUS:i
                 {:
                    RESULT = i;
                 :}
                 ;

//24
/*
term        ::= term:s1 mulop:s2 factor:s3
                 {:

                 :}
                 | factor:s
                 {:

                 :}
                 ;
*/
//25

mulop        ::= STAR:i
                 {:
                    RESULT = i;
                 :}
                 | SLASH:i
                 {:
                    RESULT = i;
                 :}
                 ;

//26
/*
factor        ::= OBRACE expr:s1 CBRACE
                 {:

                 :}
                 | var
                 {:

                 :}
                 | call
                 {:

                 :}
                 | NUM
                 {:

                 :}
                 ;
*/
//27

call        ::= ID OBRACE args:s CBRACE
                 {:

                 :}
                 ;
//28
args        ::= arg_list:s
                 {:

                 :}
                 | 
                 {:

                 :}
                 ;
//29
arg_list        ::= arg_list:s1 COMMA expr:s2
                 {:

                 :}
                 | expr:s
                 {:

                 :}
                 ;




stmt_seq     ::= stmt_seq:s1 SEMI stmt:s2 
                 {: ExpList t = s1;
                    while( t.tail != null )
                      t = t.tail;
                    t.tail = new ExpList(s2, null);
                    RESULT = s1;
                    System.out.println( "stmt_seq 1" );
                 :}
               | stmt:s
                 {: RESULT = new ExpList(s, null); 
                    System.out.println( "stmt_seq 2" );
                 :}
               | error SEMI stmt:s
                 {: parser.report_error("invalid", null); 
                    RESULT = new ExpList(s, null); 
                    System.out.println( "stmt_seq 3" );
                 :}
               ;

stmt         ::= if_stmt:i
                 {: RESULT = i; 
                    System.out.println( "stmt 1" );
                 :}
               | repeat_stmt:r
                 {: RESULT = r; 
                    System.out.println( "stmt 2" );
                 :}
               | assign_stmt:a
                 {: RESULT = a; 
                    System.out.println( "stmt 3" );
                 :}
               | read_stmt:r
                 {: RESULT = r; 
                    System.out.println( "stmt 4" );
                 :}
               | write_stmt:w
                 {: RESULT = w; 
                    System.out.println( "stmt 5" );
                 :}
              | type_spec:s
              {: RESULT = s;
                 System.out.println( "TypeSpec" );
              :}
              | param:s
              {: //RESULT = s;
                 System.out.println( "Param" );
              :}
              | var_dec:s
              {: //RESULT = s;
                 System.out.println( "Var Dec" );
              :}
               ;
              

if_stmt      ::= IF:i exp:e THEN stmt_seq:s END
                 {: RESULT = new IfExp(ileft, e, s, null); :}
               | IF:i exp:e THEN stmt_seq:s1 ELSE stmt_seq:s2 END
                 {: RESULT = new IfExp(ileft, e, s1, s2); :}
               ;

repeat_stmt  ::= REPEAT:r stmt_seq:s UNTIL exp:e
                 {: RESULT = new RepeatExp(rleft, s, e); :}
               ;

assign_stmt  ::= ID:i ASSIGN exp:e
                 {: RESULT = new AssignExp(ileft, new VarExp(ileft, i), e); :} 
                 /*| type_spec:s ID:i ASSIGN exp:e
                 {: RESULT = new AssignExp(ileft, new VarExp(ileft, i), e, s); :}*/
                 /*| type_spec:s
                 {: RESULT = new AssignExp(s); :}*/
               ;

read_stmt    ::= READ:r ID:i
                 {: RESULT = new ReadExp(rleft, new VarExp(rleft, i)); :}
               ;

write_stmt   ::= WRITE:w exp:e
                 {: RESULT = new WriteExp(wleft, e); :}
               ;

exp          ::= simple_exp:s1 LT simple_exp:s2
                 {: RESULT = new OpExp(s1left, s1, OpExp.LT, s2); :}
               | simple_exp:s1 GT simple_exp:s2
                 {: RESULT = new OpExp(s1left, s1, OpExp.GT, s2); :}
               | simple_exp:s1 EQ simple_exp:s2
                 {: RESULT = new OpExp(s1left, s1, OpExp.EQ, s2); :}
               | simple_exp:s
                 {: RESULT = s; :}
               ;

simple_exp   ::= simple_exp:s PLUS term:t
                 {: RESULT = new OpExp(sleft, s, OpExp.PLUS, t); :}
               | simple_exp:s MINUS term:t
                 {: RESULT = new OpExp(sleft, s, OpExp.MINUS, t); :}
               | term:t
                 {: RESULT = t; :}
               ;

term         ::= term:t STAR factor:f
                 {: RESULT = new OpExp(tleft, t, OpExp.STAR, f); :}
               | term:t SLASH factor:f
                 {: RESULT = new OpExp(tleft, t, OpExp.SLASH, f); :}
               | factor:f
                 {: RESULT = f; :}
               ;

factor       ::= OPAREN exp:e CPAREN
                 {: RESULT = e; :}
               | NUM:n
                 {: RESULT = new IntExp(nleft, n); :}
               | ID:i
                 {: RESULT = new VarExp(ileft, i); :}
               ;
