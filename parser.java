
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

import absyn.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\077\000\002\002\003\000\002\002\004\000\002\006" +
    "\004\000\002\006\003\000\002\015\003\000\002\015\003" +
    "\000\002\035\005\000\002\035\010\000\002\033\003\000" +
    "\002\033\003\000\002\016\010\000\002\007\003\000\002" +
    "\007\003\000\002\010\005\000\002\010\003\000\002\036" +
    "\004\000\002\036\006\000\002\031\006\000\002\012\004" +
    "\000\002\012\002\000\002\014\004\000\002\014\003\000" +
    "\002\023\003\000\002\023\003\000\002\023\003\000\002" +
    "\023\003\000\002\023\003\000\002\020\004\000\002\020" +
    "\003\000\002\021\007\000\002\021\011\000\002\022\007" +
    "\000\002\026\004\000\002\026\005\000\002\017\005\000" +
    "\002\017\003\000\002\034\003\000\002\034\006\000\002" +
    "\030\005\000\002\030\003\000\002\003\003\000\002\003" +
    "\003\000\002\003\003\000\002\003\003\000\002\003\003" +
    "\000\002\003\003\000\002\027\005\000\002\027\003\000" +
    "\002\005\003\000\002\005\003\000\002\024\005\000\002" +
    "\024\003\000\002\004\003\000\002\004\003\000\002\025" +
    "\005\000\002\025\003\000\002\025\003\000\002\025\003" +
    "\000\002\032\006\000\002\013\003\000\002\013\002\000" +
    "\002\011\005\000\002\011\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\150\000\006\006\013\010\010\001\002\000\004\002" +
    "\152\001\002\000\010\002\001\006\013\010\010\001\002" +
    "\000\004\033\014\001\002\000\010\002\ufffc\006\ufffc\010" +
    "\ufffc\001\002\000\004\033\ufff8\001\002\000\010\002\ufffe" +
    "\006\ufffe\010\ufffe\001\002\000\010\002\ufffd\006\ufffd\010" +
    "\ufffd\001\002\000\004\033\ufff9\001\002\000\010\025\016" +
    "\027\017\031\015\001\002\000\004\034\146\001\002\000" +
    "\026\002\ufffb\005\ufffb\006\ufffb\007\ufffb\010\ufffb\011\ufffb" +
    "\025\ufffb\027\ufffb\033\ufffb\034\ufffb\001\002\000\006\006" +
    "\013\010\022\001\002\000\006\026\144\030\ufff6\001\002" +
    "\000\004\033\141\001\002\000\006\030\ufff5\033\ufff8\001" +
    "\002\000\004\030\025\001\002\000\006\026\ufff3\030\ufff3" +
    "\001\002\000\004\027\027\001\002\000\010\002\ufff7\006" +
    "\ufff7\010\ufff7\001\002\000\024\005\uffee\006\uffee\007\uffee" +
    "\010\uffee\011\uffee\025\uffee\027\uffee\033\uffee\034\uffee\001" +
    "\002\000\024\005\040\006\013\007\035\010\010\011\032" +
    "\025\033\027\051\033\041\034\044\001\002\000\004\025" +
    "\140\001\002\000\004\027\134\001\002\000\024\004\uffe5" +
    "\005\uffe5\007\uffe5\011\uffe5\025\uffe5\027\uffe5\030\uffe5\033" +
    "\uffe5\034\uffe5\001\002\000\024\004\uffe7\005\uffe7\007\uffe7" +
    "\011\uffe7\025\uffe7\027\uffe7\030\uffe7\033\uffe7\034\uffe7\001" +
    "\002\000\012\025\131\027\062\033\041\034\044\001\002" +
    "\000\004\033\130\001\002\000\024\004\uffea\005\uffea\007" +
    "\uffea\011\uffea\025\uffea\027\uffea\030\uffea\033\uffea\034\uffea" +
    "\001\002\000\004\027\122\001\002\000\044\012\uffdd\013" +
    "\uffdd\014\uffdd\015\uffdd\016\uffdd\017\uffdd\020\uffdd\021\uffdd" +
    "\022\uffdd\023\uffdd\024\uffdd\025\uffdd\026\uffdd\027\111\030" +
    "\uffdd\031\110\032\uffdd\001\002\000\022\005\040\007\035" +
    "\011\032\025\033\027\051\030\106\033\041\034\044\001" +
    "\002\000\032\012\075\013\072\016\103\017\074\020\077" +
    "\021\073\022\076\023\102\025\uffda\026\uffda\030\uffda\032" +
    "\uffda\001\002\000\036\012\uffc8\013\uffc8\014\uffc8\015\uffc8" +
    "\016\uffc8\017\uffc8\020\uffc8\021\uffc8\022\uffc8\023\uffc8\025" +
    "\uffc8\026\uffc8\030\uffc8\032\uffc8\001\002\000\036\012\uffce" +
    "\013\uffce\014\uffce\015\uffce\016\uffce\017\uffce\020\uffce\021" +
    "\uffce\022\uffce\023\uffce\025\uffce\026\uffce\030\uffce\032\uffce" +
    "\001\002\000\036\012\uffd2\013\uffd2\014\065\015\067\016" +
    "\uffd2\017\uffd2\020\uffd2\021\uffd2\022\uffd2\023\uffd2\025\uffd2" +
    "\026\uffd2\030\uffd2\032\uffd2\001\002\000\024\004\uffe9\005" +
    "\uffe9\007\uffe9\011\uffe9\025\uffe9\027\uffe9\030\uffe9\033\uffe9" +
    "\034\uffe9\001\002\000\012\025\uffde\026\uffde\030\uffde\032" +
    "\uffde\001\002\000\024\005\uffee\006\uffee\007\uffee\010\uffee" +
    "\011\uffee\025\uffee\027\062\033\041\034\044\001\002\000" +
    "\024\005\uffef\006\uffef\007\uffef\010\uffef\011\uffef\025\uffef" +
    "\027\uffef\033\uffef\034\uffef\001\002\000\024\004\uffeb\005" +
    "\uffeb\007\uffeb\011\uffeb\025\uffeb\027\uffeb\030\uffeb\033\uffeb" +
    "\034\uffeb\001\002\000\036\012\uffc9\013\uffc9\014\uffc9\015" +
    "\uffc9\016\uffc9\017\uffc9\020\uffc9\021\uffc9\022\uffc9\023\uffc9" +
    "\025\uffc9\026\uffc9\030\uffc9\032\uffc9\001\002\000\040\012" +
    "\uffca\013\uffca\014\uffca\015\uffca\016\uffca\017\uffca\020\uffca" +
    "\021\uffca\022\uffca\023\uffca\024\060\025\uffca\026\uffca\030" +
    "\uffca\032\uffca\001\002\000\024\004\uffe8\005\uffe8\007\uffe8" +
    "\011\uffe8\025\uffe8\027\uffe8\030\uffe8\033\uffe8\034\uffe8\001" +
    "\002\000\022\005\uffec\007\uffec\011\uffec\025\uffec\027\uffec" +
    "\030\uffec\033\uffec\034\uffec\001\002\000\010\027\062\033" +
    "\041\034\044\001\002\000\012\025\uffdf\026\uffdf\030\uffdf" +
    "\032\uffdf\001\002\000\010\027\062\033\041\034\044\001" +
    "\002\000\004\030\064\001\002\000\036\012\uffcb\013\uffcb" +
    "\014\uffcb\015\uffcb\016\uffcb\017\uffcb\020\uffcb\021\uffcb\022" +
    "\uffcb\023\uffcb\025\uffcb\026\uffcb\030\uffcb\032\uffcb\001\002" +
    "\000\010\027\uffcd\033\uffcd\034\uffcd\001\002\000\010\027" +
    "\062\033\041\034\044\001\002\000\010\027\uffcc\033\uffcc" +
    "\034\uffcc\001\002\000\036\012\uffca\013\uffca\014\uffca\015" +
    "\uffca\016\uffca\017\uffca\020\uffca\021\uffca\022\uffca\023\uffca" +
    "\025\uffca\026\uffca\030\uffca\032\uffca\001\002\000\036\012" +
    "\uffcf\013\uffcf\014\uffcf\015\uffcf\016\uffcf\017\uffcf\020\uffcf" +
    "\021\uffcf\022\uffcf\023\uffcf\025\uffcf\026\uffcf\030\uffcf\032" +
    "\uffcf\001\002\000\010\027\uffd0\033\uffd0\034\uffd0\001\002" +
    "\000\010\027\uffd6\033\uffd6\034\uffd6\001\002\000\010\027" +
    "\uffd9\033\uffd9\034\uffd9\001\002\000\010\027\uffd1\033\uffd1" +
    "\034\uffd1\001\002\000\010\027\uffd5\033\uffd5\034\uffd5\001" +
    "\002\000\010\027\uffd7\033\uffd7\034\uffd7\001\002\000\010" +
    "\027\062\033\041\034\044\001\002\000\010\027\062\033" +
    "\041\034\044\001\002\000\010\027\uffd4\033\uffd4\034\uffd4" +
    "\001\002\000\010\027\uffd8\033\uffd8\034\uffd8\001\002\000" +
    "\016\012\075\013\072\025\uffdb\026\uffdb\030\uffdb\032\uffdb" +
    "\001\002\000\036\012\uffd3\013\uffd3\014\065\015\067\016" +
    "\uffd3\017\uffd3\020\uffd3\021\uffd3\022\uffd3\023\uffd3\025\uffd3" +
    "\026\uffd3\030\uffd3\032\uffd3\001\002\000\032\002\ufff0\004" +
    "\ufff0\005\ufff0\006\ufff0\007\ufff0\010\ufff0\011\ufff0\025\ufff0" +
    "\027\ufff0\030\ufff0\033\ufff0\034\ufff0\001\002\000\022\005" +
    "\uffed\007\uffed\011\uffed\025\uffed\027\uffed\030\uffed\033\uffed" +
    "\034\uffed\001\002\000\010\027\062\033\041\034\044\001" +
    "\002\000\012\027\062\030\uffc5\033\041\034\044\001\002" +
    "\000\006\026\116\030\uffc6\001\002\000\004\030\115\001" +
    "\002\000\006\026\uffc3\030\uffc3\001\002\000\036\012\uffc7" +
    "\013\uffc7\014\uffc7\015\uffc7\016\uffc7\017\uffc7\020\uffc7\021" +
    "\uffc7\022\uffc7\023\uffc7\025\uffc7\026\uffc7\030\uffc7\032\uffc7" +
    "\001\002\000\010\027\062\033\041\034\044\001\002\000" +
    "\006\026\uffc4\030\uffc4\001\002\000\004\032\121\001\002" +
    "\000\040\012\uffdc\013\uffdc\014\uffdc\015\uffdc\016\uffdc\017" +
    "\uffdc\020\uffdc\021\uffdc\022\uffdc\023\uffdc\024\uffdc\025\uffdc" +
    "\026\uffdc\030\uffdc\032\uffdc\001\002\000\010\027\062\033" +
    "\041\034\044\001\002\000\004\030\124\001\002\000\020" +
    "\005\040\007\035\011\032\025\033\027\051\033\041\034" +
    "\044\001\002\000\024\004\uffe4\005\uffe4\007\uffe4\011\uffe4" +
    "\025\uffe4\027\uffe4\030\uffe4\033\uffe4\034\uffe4\001\002\000" +
    "\020\005\040\007\035\011\032\025\033\027\051\033\041" +
    "\034\044\001\002\000\024\004\uffe3\005\uffe3\007\uffe3\011" +
    "\uffe3\025\uffe3\027\uffe3\030\uffe3\033\uffe3\034\uffe3\001\002" +
    "\000\006\025\016\031\015\001\002\000\024\004\uffe1\005" +
    "\uffe1\007\uffe1\011\uffe1\025\uffe1\027\uffe1\030\uffe1\033\uffe1" +
    "\034\uffe1\001\002\000\004\025\133\001\002\000\024\004" +
    "\uffe0\005\uffe0\007\uffe0\011\uffe0\025\uffe0\027\uffe0\030\uffe0" +
    "\033\uffe0\034\uffe0\001\002\000\010\027\062\033\041\034" +
    "\044\001\002\000\004\030\136\001\002\000\020\005\040" +
    "\007\035\011\032\025\033\027\051\033\041\034\044\001" +
    "\002\000\024\004\uffe2\005\uffe2\007\uffe2\011\uffe2\025\uffe2" +
    "\027\uffe2\030\uffe2\033\uffe2\034\uffe2\001\002\000\024\004" +
    "\uffe6\005\uffe6\007\uffe6\011\uffe6\025\uffe6\027\uffe6\030\uffe6" +
    "\033\uffe6\034\uffe6\001\002\000\010\026\ufff2\030\ufff2\031" +
    "\142\001\002\000\004\032\143\001\002\000\006\026\ufff1" +
    "\030\ufff1\001\002\000\006\006\013\010\010\001\002\000" +
    "\006\026\ufff4\030\ufff4\001\002\000\004\032\147\001\002" +
    "\000\004\025\150\001\002\000\026\002\ufffa\005\ufffa\006" +
    "\ufffa\007\ufffa\010\ufffa\011\ufffa\025\ufffa\027\ufffa\033\ufffa" +
    "\034\ufffa\001\002\000\010\002\uffff\006\uffff\010\uffff\001" +
    "\002\000\004\002\000\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\150\000\016\002\003\006\004\015\010\016\006\033" +
    "\005\035\011\001\001\000\002\001\001\000\012\015\150" +
    "\016\006\033\005\035\011\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\007\022\010\017\033\020" +
    "\036\023\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\031\025\001\001\000\002\001\001\000\004\012\027\001" +
    "\001\000\042\014\041\017\030\020\052\021\046\022\055" +
    "\023\056\024\045\025\044\026\033\027\042\030\047\031" +
    "\036\032\053\033\035\034\054\035\051\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\020\017\131\024\045\025\044\027\042\030\047" +
    "\032\053\034\054\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\034\017\030" +
    "\020\052\021\046\022\055\023\106\024\045\025\044\026" +
    "\033\027\042\030\047\031\036\032\053\034\054\001\001" +
    "\000\006\003\100\005\077\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\004\065\001\001\000\002\001\001" +
    "\000\002\001\001\000\022\012\027\017\062\024\045\025" +
    "\044\027\042\030\047\032\053\034\054\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\020\017\060" +
    "\024\045\025\044\027\042\030\047\032\053\034\054\001" +
    "\001\000\002\001\001\000\020\017\062\024\045\025\044" +
    "\027\042\030\047\032\053\034\054\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\025\070" +
    "\032\053\034\067\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\024\104\025\044\032\053\034\067" +
    "\001\001\000\014\024\045\025\044\027\103\032\053\034" +
    "\067\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\005\077\001\001\000\004\004\065\001\001\000\002\001" +
    "\001\000\002\001\001\000\020\017\117\024\045\025\044" +
    "\027\042\030\047\032\053\034\054\001\001\000\024\011" +
    "\111\013\112\017\113\024\045\025\044\027\042\030\047" +
    "\032\053\034\054\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\020\017\116" +
    "\024\045\025\044\027\042\030\047\032\053\034\054\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\020\017\122\024\045\025\044\027\042\030\047\032" +
    "\053\034\054\001\001\000\002\001\001\000\034\017\030" +
    "\020\052\021\046\022\055\023\124\024\045\025\044\026" +
    "\033\027\042\030\047\031\036\032\053\034\054\001\001" +
    "\000\002\001\001\000\034\017\030\020\052\021\046\022" +
    "\055\023\126\024\045\025\044\026\033\027\042\030\047" +
    "\031\036\032\053\034\054\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\020\017\134\024\045\025\044\027\042\030" +
    "\047\032\053\034\054\001\001\000\002\001\001\000\034" +
    "\017\030\020\052\021\046\022\055\023\136\024\045\025" +
    "\044\026\033\027\042\030\047\031\036\032\053\034\054" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\033\020" +
    "\036\144\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    
    /* Change the method report_error so it will display the line and
       column of where the error occurred in the input as well as the
       reason for the error which is passed into the method in the
       String 'message'. */
    public void report_error(String message, Object info) {
   
        /* Create a StringBuffer called 'm' with the string 'Error' in it. */
        StringBuffer m = new StringBuffer("Error");
   
        /* Check if the information passed to the method is the same
           type as the type java_cup.runtime.Symbol. */
        if (info instanceof java_cup.runtime.Symbol) {
            /* Declare a java_cup.runtime.Symbol object 's' with the
               information in the object info that is being typecasted
               as a java_cup.runtime.Symbol object. */
            java_cup.runtime.Symbol s = ((java_cup.runtime.Symbol) info);
   
            /* Check if the line number in the input is greater or
               equal to zero. */
            if (s.left >= 0) {                
                /* Add to the end of the StringBuffer error message
                   the line number of the error in the input. */
                m.append(" in line "+(s.left+1));   
                /* Check if the column number in the input is greater
                   or equal to zero. */
                if (s.right >= 0)                    
                    /* Add to the end of the StringBuffer error message
                       the column number of the error in the input. */
                    m.append(", column "+(s.right+1));
            }
        }
   
        /* Add to the end of the StringBuffer error message created in
           this method the message that was passed into this method. */
        m.append(" : "+message);
   
        /* Print the contents of the StringBuffer 'm', which contains
           an error message, out on a line. */
        System.err.println(m);
    }
   
    /* Change the method report_fatal_error so when it reports a fatal
       error it will display the line and column number of where the
       fatal error occurred in the input as well as the reason for the
       fatal error which is passed into the method in the object
       'message' and then exit.*/
    public void report_fatal_error(String message, Object info) {
        report_error(message, info);
        System.exit(1);
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // program ::= dec_list 
            {
              DecList RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		DecList s = (DecList)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = s;
                    System.out.println( "The abstract syntax tree is:" );
                    Absyn.showTree( RESULT, 0 );
                 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		DecList start_val = (DecList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // dec_list ::= dec_list dec 
            {
              DecList RESULT =null;
		int s1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		DecList s1 = (DecList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int s2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int s2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Dec s2 = (Dec)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
                    DecList t = s1;
                    while( t.tail != null )
                      t = t.tail;
                    t.tail = new DecList(s2, null);
                    RESULT = s1;
                 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("dec_list",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // dec_list ::= dec 
            {
              DecList RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Dec s = (Dec)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
                   RESULT = new DecList(s, null); 
                 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("dec_list",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // dec ::= var_dec 
            {
              Dec RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		VarDec s = (VarDec)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    RESULT = s;
                 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("dec",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // dec ::= fun_dec 
            {
              Dec RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Dec s = (Dec)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
                    RESULT = s;
                 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("dec",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // var_dec ::= type_spec ID SEMI 
            {
              VarDec RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		TypeSpec s = (TypeSpec)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                    RESULT = new RegularDec(sleft,s,i);
                 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("var_dec",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // var_dec ::= type_spec ID OBRACK NUM CBRACK SEMI 
            {
              VarDec RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		TypeSpec s = (TypeSpec)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 
                    RESULT = new ArrayDec(sleft,s,i, new IntExp(nleft,n));
                 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("var_dec",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // type_spec ::= INT 
            {
              TypeSpec RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
                    RESULT = new TypeSpec(ileft,TypeSpec.INT);
                 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type_spec",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // type_spec ::= VOID 
            {
              TypeSpec RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
                    RESULT = new TypeSpec(ileft,TypeSpec.VOID);
                 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type_spec",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // fun_dec ::= type_spec ID OBRACE params CBRACE comp_stmt 
            {
              Dec RESULT =null;
		int s1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		TypeSpec s1 = (TypeSpec)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int s2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int s2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		DecList s2 = (DecList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int s3left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int s3right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Dec s3 = (Dec)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    RESULT = new FunDec(s1left, s1, i, s2, s3);
                 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("fun_dec",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // params ::= param_list 
            {
              DecList RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		DecList s = (DecList)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    RESULT = s;
                 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("params",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // params ::= VOID 
            {
              DecList RESULT =null;
		 
                    RESULT = null;
                    //????
                 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("params",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // param_list ::= param_list COMMA param 
            {
              DecList RESULT =null;
		int s1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		DecList s1 = (DecList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int s2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int s2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		VarDec s2 = (VarDec)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    DecList t = s1;
                    while( t.tail != null )
                      t = t.tail;
                    t.tail = new DecList(s2, null);
                    RESULT = s1;
                 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("param_list",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // param_list ::= param 
            {
              DecList RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		VarDec s = (VarDec)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
                    RESULT = new DecList(s, null); 
                 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("param_list",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // param ::= type_spec ID 
            {
              VarDec RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		TypeSpec s = (TypeSpec)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    RESULT = new RegularDec(sleft,s,i);
                 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("param",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // param ::= type_spec ID OBRACK CBRACK 
            {
              VarDec RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		TypeSpec s = (TypeSpec)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 
                    RESULT = new RegularDec(sleft,s,i);
                 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("param",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // comp_stmt ::= OBRACE local_decs stmt_list CBRACE 
            {
              Dec RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int s1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		DecList s1 = (DecList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int s2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int s2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		DecList s2 = (DecList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                    RESULT = new CompStmt(ileft, s1, s2);
                 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("comp_stmt",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // local_decs ::= local_decs var_dec 
            {
              DecList RESULT =null;
		int s1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		DecList s1 = (DecList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int s2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int s2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		VarDec s2 = (VarDec)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    DecList t = s1;
                    while( t.tail != null )
                      t = t.tail;
                    t.tail = new DecList(s2, null);
                    RESULT = s1;
                 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("local_decs",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // local_decs ::= 
            {
              DecList RESULT =null;
		 
                    //???
                    RESULT = null;
                 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("local_decs",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // stmt_list ::= stmt_list stmt 
            {
              DecList RESULT =null;
		int s1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		DecList s1 = (DecList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int s2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int s2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Dec s2 = (Dec)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 DecList t = s1;
                    while( t.tail != null )
                      t = t.tail;
                    t.tail = new DecList(s2, null);
                    RESULT = s1;
                 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt_list",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // stmt_list ::= stmt 
            {
              DecList RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Dec s = (Dec)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new DecList(s, null); 
                 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt_list",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // stmt ::= expr_stmt 
            {
              Dec RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Dec s = (Dec)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    RESULT = s;
                 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // stmt ::= comp_stmt 
            {
              Dec RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Dec s = (Dec)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
                   RESULT = s;
                 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // stmt ::= sele_stmt 
            {
              Dec RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Dec s = (Dec)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
                    RESULT = s;
                 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // stmt ::= iter_stmt 
            {
              Dec RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Dec s = (Dec)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
                    RESULT = s;
                 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // stmt ::= ret_stmt 
            {
              Dec RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Dec s = (Dec)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
                    RESULT = s;
                 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // expr_stmt ::= expr SEMI 
            {
              Dec RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Dec i = (Dec)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                    RESULT = new ExprStmt(ileft,i);
                 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr_stmt",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // expr_stmt ::= SEMI 
            {
              Dec RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    RESULT = new ExprStmt(ileft,null);
                 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr_stmt",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // sele_stmt ::= IF OBRACE expr CBRACE stmt 
            {
              Dec RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int s1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Dec s1 = (Dec)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int s2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int s2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Dec s2 = (Dec)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    RESULT = new SeleStmt(ileft, s1, s2);
                 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sele_stmt",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // sele_stmt ::= IF OBRACE expr CBRACE stmt ELSE stmt 
            {
              Dec RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int s1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Dec s1 = (Dec)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int s2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int s2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Dec s2 = (Dec)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int s3left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int s3right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Dec s3 = (Dec)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    RESULT = new SeleStmt(ileft, s1, s2, s3);
                 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sele_stmt",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // iter_stmt ::= WHILE OBRACE expr CBRACE stmt 
            {
              Dec RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int s1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Dec s1 = (Dec)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int s2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int s2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Dec s2 = (Dec)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    RESULT = new IterStmt(ileft, s1, s2);
                 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("iter_stmt",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // ret_stmt ::= RETURN SEMI 
            {
              Dec RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                    RESULT = new ReturnStmt(ileft,null);
                 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ret_stmt",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // ret_stmt ::= RETURN expr SEMI 
            {
              Dec RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Dec s = (Dec)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                    RESULT = new ReturnStmt(ileft,s);
                 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ret_stmt",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // expr ::= var ASSIGN expr 
            {
              Dec RESULT =null;
		int s1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		VarDec s1 = (VarDec)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int s2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int s2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Dec s2 = (Dec)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    RESULT = new Expr(s1left, s1, s2);
                 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // expr ::= sim_expr 
            {
              Dec RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Dec s = (Dec)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    RESULT = new Expr(sleft, s);
                 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // var ::= ID 
            {
              VarDec RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    RESULT = new RegularVar(ileft,i);
                 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("var",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // var ::= ID OBRACK expr CBRACK 
            {
              VarDec RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Dec s = (Dec)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                    RESULT = new ArrayVar(ileft,i,s); 
                 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("var",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // sim_expr ::= add_expr relop add_expr 
            {
              Dec RESULT =null;
		int s1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Dec s1 = (Dec)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int s2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int s2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Integer s2 = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int s3left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int s3right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Dec s3 = (Dec)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    RESULT = new OpExp2(s1left,s1,s2,s3);
                 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sim_expr",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // sim_expr ::= add_expr 
            {
              Dec RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Dec s = (Dec)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    RESULT = s;
                 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sim_expr",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // relop ::= LTE 
            {
              Integer RESULT =null;
		
                    RESULT = new Integer(7);
                 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("relop",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // relop ::= LT 
            {
              Integer RESULT =null;
		
                    RESULT = new Integer(5);
                 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("relop",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // relop ::= GT 
            {
              Integer RESULT =null;
		
                    RESULT = new Integer(6);
                 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("relop",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // relop ::= GTE 
            {
              Integer RESULT =null;
		
                    RESULT = new Integer(8);
                 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("relop",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // relop ::= EQ 
            {
              Integer RESULT =null;
		
                    RESULT = new Integer(4);
                 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("relop",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // relop ::= NE 
            {
              Integer RESULT =null;
		
                    RESULT = new Integer(9);
                 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("relop",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // add_expr ::= add_expr addop term 
            {
              Dec RESULT =null;
		int s1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Dec s1 = (Dec)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int s2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int s2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Integer s2 = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int s3left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int s3right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Dec s3 = (Dec)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    RESULT = new OpExp2(s1left,s1,OpExp.PLUS,s3);
                 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("add_expr",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // add_expr ::= term 
            {
              Dec RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Dec s = (Dec)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    RESULT = s;
                 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("add_expr",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // addop ::= PLUS 
            {
              Integer RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    RESULT = new Integer(0);
                 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("addop",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // addop ::= MINUS 
            {
              Integer RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    RESULT = new Integer(1);
                 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("addop",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // term ::= term mulop factor 
            {
              Dec RESULT =null;
		int s1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Dec s1 = (Dec)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int s3left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int s3right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Dec s3 = (Dec)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    RESULT = new OpExp2(s1left,s1,OpExp.STAR,s3);
                 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("term",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // term ::= factor 
            {
              Dec RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Dec s = (Dec)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    RESULT = s;
                 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("term",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // mulop ::= STAR 
            {
              Integer RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    RESULT = new Integer(2);
                 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("mulop",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // mulop ::= SLASH 
            {
              Integer RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    RESULT = new Integer(3);
                 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("mulop",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // factor ::= OBRACE expr CBRACE 
            {
              Dec RESULT =null;
		int s1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Dec s1 = (Dec)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                    RESULT = s1;
                 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // factor ::= var 
            {
              Dec RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		VarDec v = (VarDec)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    RESULT = new RegularVar(vleft,v);
                 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // factor ::= call 
            {
              Dec RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Dec c = (Dec)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    RESULT = c;
                 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // factor ::= NUM 
            {
              Dec RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    RESULT = new IntExp(nleft,n);
                 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // call ::= ID OBRACE args CBRACE 
            {
              Dec RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		DecList s = (DecList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                    RESULT = new Call(ileft, i, s);
                 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("call",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // args ::= arg_list 
            {
              DecList RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		DecList s = (DecList)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    RESULT = s;
                 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("args",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // args ::= 
            {
              DecList RESULT =null;
		
                    //???
                    RESULT = null;
                 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("args",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // arg_list ::= arg_list COMMA expr 
            {
              DecList RESULT =null;
		int s1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		DecList s1 = (DecList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int s2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int s2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Dec s2 = (Dec)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    DecList t = s1;
                    while( t.tail != null )
                      t = t.tail;
                    t.tail = new DecList(s2, null);
                    RESULT = s1;
                 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("arg_list",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // arg_list ::= expr 
            {
              DecList RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Dec s = (Dec)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    RESULT = new DecList(s, null);
                 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("arg_list",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
